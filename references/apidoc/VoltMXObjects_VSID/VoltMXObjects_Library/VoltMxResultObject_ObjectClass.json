{"classname":"VoltMxResultObject","comment":"Class for passing content back to Foundry and manipulating results from an integration service in its postprocessor.","valuetype":"","filenamebase":"VoltMxResultObject_ObjectClass","fqnprefix":"VoltMXObjects","qn":"VoltMxResultObject","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"217E2C2ABFAF1525002589CF0046086D","classid":"A6701C3ED7A5D2D680258AAE00371965","signature":"Public Class VoltMxResultObject","modifiers":"Public","classname":"VoltMxResultObject","parentclassname":"None","constructorsignature":"Public Sub New(isPreProcessor As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for passing content back to Foundry and manipulating results from an integration service in its postprocessor.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for passing content back to Foundry and manipulating results from an integration service in its postprocessor.","inlinecomment":" \t &apos; Class for passing content back to Foundry and manipulating results from an integration service in its postprocessor.","codesamplehtml":"", "methods":[{"label":"toJson","comment":"Converts the VoltMxResultObject into JSON for passing back to Foundry&amp;apos;","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"toJson","codesample":"&amp;apos; This code is from the Foundry boilerplate\n    Try\n    \n    Catch\n        Call VoltMxResult.setErrorMessage(getErrorMsg(&amp;quot;VOLTSCRIPT_CONNECTOR: &amp;quot;))\n    Finally\n        Print VoltMxResult.toJson().toString(false)\n    End Try","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function toJson() As JsonObject","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts the VoltMxResultObject into JSON for passing back to Foundry&amp;apos;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts the VoltMxResultObject into JSON for passing back to Foundry&amp;apos;","inlinecomment":" \t &apos; Converts the VoltMxResultObject into JSON for passing back to Foundry&amp;apos;","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; This code is from the Foundry boilerplate&lt;br /&gt;    Try&lt;br /&gt;    &lt;br /&gt;    Catch&lt;br /&gt;        Call VoltMxResult.setErrorMessage(getErrorMsg(&amp;quot;VOLTSCRIPT_CONNECTOR: &amp;quot;))&lt;br /&gt;    Finally&lt;br /&gt;        Print VoltMxResult.toJson().toString(false)&lt;br /&gt;    End Try", "signatureelements":["Public","Function"]},{"label":"httpStatusCode","comment":"HTTP status code that will be returned from the integration service.","valuetype":"Integer","filenamebase":"httpStatusCode_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"Get.httpStatusCode","codesample":"&amp;apos; The following tells the user they are not allowed to perform this code\nVoltMxResult.httpStatusCode = 403\nVoltMxResult.opstatus = 1\nCall VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get httpStatusCode As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;HTTP status code that will be returned from the integration service.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"HTTP status code that will be returned from the integration service.","inlinecomment":" \t &apos; HTTP status code that will be returned from the integration service.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following tells the user they are not allowed to perform this code&lt;br /&gt;VoltMxResult.httpStatusCode = 403&lt;br /&gt;VoltMxResult.opstatus = 1&lt;br /&gt;Call VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)", "signatureelements":["Public","Property","Get"]},{"label":"opstatus","comment":"Opstatus that will be returned from the integration service.","valuetype":"Integer","filenamebase":"opstatus_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"Get.opstatus","codesample":"&amp;apos; The following code sets the opstatus to 1. opstatus 0 is typically used by Iris processing to denote success.\nVoltMxResult.httpStatusCode = 403\nVoltMxResult.opstatus = 1\nCall VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get opstatus As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Opstatus that will be returned from the integration service.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Opstatus that will be returned from the integration service.","inlinecomment":" \t &apos; Opstatus that will be returned from the integration service.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following code sets the opstatus to 1. opstatus 0 is typically used by Iris processing to denote success.&lt;br /&gt;VoltMxResult.httpStatusCode = 403&lt;br /&gt;VoltMxResult.opstatus = 1&lt;br /&gt;Call VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)", "signatureelements":["Public","Property","Get"]},{"label":"result","comment":"JsonObject that will be outputted from the integration service","valuetype":"JsonObject","filenamebase":"result_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"Get.result","codesample":"&amp;apos; The following code adds a boolean &amp;quot;success&amp;quot; parameter to the JSON output of the integration service\nVoltMxResult.result.insertValue(&amp;quot;success&amp;quot;, true)","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get result As JsonObject","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject that will be outputted from the integration service&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject that will be outputted from the integration service","inlinecomment":" \t &apos; JsonObject that will be outputted from the integration service","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following code adds a boolean &amp;quot;success&amp;quot; parameter to the JSON output of the integration service&lt;br /&gt;VoltMxResult.result.insertValue(&amp;quot;success&amp;quot;, true)", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"httpStatusCode","comment":"HTTP status code that will be returned from the integration service.","valuetype":"Integer","filenamebase":"httpStatusCode_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"Set.httpStatusCode","codesample":"&amp;apos; The following tells the user they are not allowed to perform this code\nVoltMxResult.httpStatusCode = 403\nVoltMxResult.opstatus = 1\nCall VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set httpStatusCode As Integer","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;HTTP status code that will be returned from the integration service.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"HTTP status code that will be returned from the integration service.","inlinecomment":" \t &apos; HTTP status code that will be returned from the integration service.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following tells the user they are not allowed to perform this code&lt;br /&gt;VoltMxResult.httpStatusCode = 403&lt;br /&gt;VoltMxResult.opstatus = 1&lt;br /&gt;Call VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)", "signatureelements":["Public","Property","Set"]},{"label":"opstatus","comment":"Opstatus that will be returned from the integration service.","valuetype":"Integer","filenamebase":"opstatus_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"Set.opstatus","codesample":"&amp;apos; The following code sets the opstatus to 1. opstatus 0 is typically used by Iris processing to denote success.\nVoltMxResult.httpStatusCode = 403\nVoltMxResult.opstatus = 1\nCall VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set opstatus As Integer","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Opstatus that will be returned from the integration service.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Opstatus that will be returned from the integration service.","inlinecomment":" \t &apos; Opstatus that will be returned from the integration service.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following code sets the opstatus to 1. opstatus 0 is typically used by Iris processing to denote success.&lt;br /&gt;VoltMxResult.httpStatusCode = 403&lt;br /&gt;VoltMxResult.opstatus = 1&lt;br /&gt;Call VoltMxResult.result.insertMessage(&amp;quot;error&amp;quot;, &amp;quot;You are not authorized to perform this operation&amp;quot;)", "signatureelements":["Public","Property","Set"]},{"label":"addDeviceHeaderParam","comment":"Adds a device header parameter for the Foundry response.","valuetype":"","filenamebase":"addDeviceHeaderParam_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"addDeviceHeaderParam","codesample":"&amp;apos; The following adds a device header\nCall VoltMxResult.addDeviceHeader(&amp;quot;X-VOLTSCRIPT&amp;quot;, &amp;quot;Ran&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(key As String, value As String)","signature":"Public Sub addDeviceHeaderParam(key As String, value As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a device header parameter for the Foundry response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a device header parameter for the Foundry response.","inlinecomment":" \t &apos; Adds a device header parameter for the Foundry response.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following adds a device header&lt;br /&gt;Call VoltMxResult.addDeviceHeader(&amp;quot;X-VOLTSCRIPT&amp;quot;, &amp;quot;Ran&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"key","comment":"Key of the device header parameter","valuetype":"String","filenamebase":"key_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddDeviceHeaderParam","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of the device header parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of the device header parameter","inlinecomment":" \t &apos; Key of the device header parameter"},{"label":"value","comment":"String value for the device header parameter","valuetype":"String","filenamebase":"value_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddDeviceHeaderParam","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String value for the device header parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String value for the device header parameter","inlinecomment":" \t &apos; String value for the device header parameter"}]},{"label":"addHeaderParam","comment":"Adds a header param to the Foundry response.","valuetype":"","filenamebase":"addHeaderParam_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"addHeaderParam","codesample":"&amp;apos; This code adds a header parameter to VoltMxRequest object\nCall VoltMxResult.addHeaderParam(&amp;quot;X-VOLTSCRIPT&amp;quot;, &amp;quot;Ran&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(key As String, value As Variant)","signature":"Public Sub addHeaderParam(key As String, value As Variant)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a header param to the Foundry response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a header param to the Foundry response.","inlinecomment":" \t &apos; Adds a header param to the Foundry response.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; This code adds a header parameter to VoltMxRequest object&lt;br /&gt;Call VoltMxResult.addHeaderParam(&amp;quot;X-VOLTSCRIPT&amp;quot;, &amp;quot;Ran&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"key","comment":"Key for the Foundry response parameter","valuetype":"String","filenamebase":"key_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddHeaderParam","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key for the Foundry response parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key for the Foundry response parameter","inlinecomment":" \t &apos; Key for the Foundry response parameter"},{"label":"value","comment":"Value for the Foundry response parameter","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddHeaderParam","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the Foundry response parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the Foundry response parameter","inlinecomment":" \t &apos; Value for the Foundry response parameter"}]},{"label":"addInputParam","comment":"Adds an input parameter for the Foundry integration service. This is only relevant for preprocessors.","valuetype":"","filenamebase":"addInputParam_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"addInputParam","codesample":"&amp;apos;The following code would add a username from a session parameter to the subsequent request, if available. This could be used to lazy-load the value.\nDim username as String\nusername = VoltMxSession.getAttribute(&amp;quot;username&amp;quot;)\nIf (username != &amp;quot;&amp;quot;) Then\n    Call VoltMxResult.addInputParam(&amp;quot;username&amp;quot;, username)\nElse\n   &amp;apos; E.g. extract from base64-decoded JWT token)\nEnd If","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(key As String, value As Variant)","signature":"Public Sub addInputParam(key As String, value As Variant)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an input parameter for the Foundry integration service. This is only relevant for preprocessors.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an input parameter for the Foundry integration service. This is only relevant for preprocessors.","inlinecomment":" \t &apos; Adds an input parameter for the Foundry integration service. This is only relevant for preprocessors.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos;The following code would add a username from a session parameter to the subsequent request, if available. This could be used to lazy-load the value.&lt;br /&gt;Dim username as String&lt;br /&gt;username = VoltMxSession.getAttribute(&amp;quot;username&amp;quot;)&lt;br /&gt;If (username != &amp;quot;&amp;quot;) Then&lt;br /&gt;    Call VoltMxResult.addInputParam(&amp;quot;username&amp;quot;, username)&lt;br /&gt;Else&lt;br /&gt;   &amp;apos; E.g. extract from base64-decoded JWT token)&lt;br /&gt;End If", "signatureelements":["Public","Sub"], "arguments":[{"label":"key","comment":"Key for the input parameter","valuetype":"String","filenamebase":"key_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddInputParam","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key for the input parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key for the input parameter","inlinecomment":" \t &apos; Key for the input parameter"},{"label":"value","comment":"Value for the input parameter","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddInputParam","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the input parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the input parameter","inlinecomment":" \t &apos; Value for the input parameter"}]},{"label":"addRequestParam","comment":"Adds a request parameter to the Foundry request. Only relevant for preprocessors.","valuetype":"","filenamebase":"addRequestParam_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"addRequestParam","codesample":"&amp;apos; This code adds a request parameter to the subsequent request\nCall VoltMxResult.addRequestParam(&amp;quot;VOLT-MX-VOLTSCRIPT&amp;quot;, &amp;quot;Code ran&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(key As String, value As Variant)","signature":"Public Sub addRequestParam(key As String, value As Variant)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a request parameter to the Foundry request. Only relevant for preprocessors.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a request parameter to the Foundry request. Only relevant for preprocessors.","inlinecomment":" \t &apos; Adds a request parameter to the Foundry request. Only relevant for preprocessors.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; This code adds a request parameter to the subsequent request&lt;br /&gt;Call VoltMxResult.addRequestParam(&amp;quot;VOLT-MX-VOLTSCRIPT&amp;quot;, &amp;quot;Code ran&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"key","comment":"Key for the request parameter","valuetype":"String","filenamebase":"key_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddRequestParam","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key for the request parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key for the request parameter","inlinecomment":" \t &apos; Key for the request parameter"},{"label":"value","comment":"Value for the request parameter","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddRequestParam","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the request parameter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the request parameter","inlinecomment":" \t &apos; Value for the request parameter"}]},{"label":"addSessionAttribute","comment":"Adds a session attribute for the Foundry session object.","valuetype":"","filenamebase":"addSessionAttribute_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"addSessionAttribute","codesample":"&amp;apos; The following code adds a JWT token from a variable to the session, for use in subsequent calls. This might be used if you are authenticating via a functional account.\nCall VoltMxResult.addSessionAttribute(&amp;quot;authToken&amp;quot;, jwtToken)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(key As String, value As Variant)","signature":"Public Sub addSessionAttribute(key As String, value As Variant)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a session attribute for the Foundry session object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a session attribute for the Foundry session object.","inlinecomment":" \t &apos; Adds a session attribute for the Foundry session object.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following code adds a JWT token from a variable to the session, for use in subsequent calls. This might be used if you are authenticating via a functional account.&lt;br /&gt;Call VoltMxResult.addSessionAttribute(&amp;quot;authToken&amp;quot;, jwtToken)", "signatureelements":["Public","Sub"], "arguments":[{"label":"key","comment":"Key for the session attribute","valuetype":"String","filenamebase":"key_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddSessionAttribute","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key for the session attribute&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key for the session attribute","inlinecomment":" \t &apos; Key for the session attribute"},{"label":"value","comment":"Value for the session attribute","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectaddSessionAttribute","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the session attribute&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the session attribute","inlinecomment":" \t &apos; Value for the session attribute"}]},{"label":"echoHttpServerContext","comment":"Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.","valuetype":"","filenamebase":"echoHttpServerContext_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"echoHttpServerContext","codesample":"&amp;apos; This code just echoes the http server context\nCall VoltMxResult.echoUnitTestContext()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub echoHttpServerContext()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.","inlinecomment":" \t &apos; Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; This code just echoes the http server context&lt;br /&gt;Call VoltMxResult.echoUnitTestContext()", "signatureelements":["Public","Sub"]},{"label":"echoUnitTestContext","comment":"Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.","valuetype":"","filenamebase":"echoUnitTestContext_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"echoUnitTestContext","codesample":"&amp;apos; This code just echoes the context\nCall VoltMxResult.echoUnitTestContext()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub echoUnitTestContext()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.","inlinecomment":" \t &apos; Copies the incoming unit test context for VoltScript HTTP server into the result, the unitTestContext element outputed by setting &amp;quot;vsTestingContext&amp;quot;:true in integration services.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; This code just echoes the context&lt;br /&gt;Call VoltMxResult.echoUnitTestContext()", "signatureelements":["Public","Sub"]},{"label":"loadFromJson","comment":"","valuetype":"","filenamebase":"loadFromJson_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"loadFromJson","codesample":"&amp;apos; The following code is from extractObjects function\n    Call jsonParser.loadFromJson(data)\n    Set jsonObj = jsonParser.getRootObject()\n    If (jsonObj.isChild(RESULT_PARAM)) Then\n        Set passedObj = jsonObj.getChild(RESULT_PARAM)\n    Else\n        Set passedObj = New JsonObject()\n    End If\n    Call VoltMxResult.loadFromjson(passedObj)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(jsonObj As JsonObject)","signature":"Public Sub loadFromJson(jsonObj As JsonObject)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; The following code is from extractObjects function&lt;br /&gt;    Call jsonParser.loadFromJson(data)&lt;br /&gt;    Set jsonObj = jsonParser.getRootObject()&lt;br /&gt;    If (jsonObj.isChild(RESULT_PARAM)) Then&lt;br /&gt;        Set passedObj = jsonObj.getChild(RESULT_PARAM)&lt;br /&gt;    Else&lt;br /&gt;        Set passedObj = New JsonObject()&lt;br /&gt;    End If&lt;br /&gt;    Call VoltMxResult.loadFromjson(passedObj)", "signatureelements":["Public","Sub"], "arguments":[{"label":"jsonObj","comment":"JSON object containing the incoming result","valuetype":"JsonObject","filenamebase":"jsonObj_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectloadFromJson","qn":"jsonObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object containing the incoming result&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object containing the incoming result","inlinecomment":" \t &apos; JSON object containing the incoming result"}]},{"label":"New","comment":"Constructor. This is automatically called during extractObjects() and should not be run manually.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(isPreProcessor As Boolean)","signature":"Public Sub New(isPreProcessor As Boolean)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. This is automatically called during extractObjects() and should not be run manually.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. This is automatically called during extractObjects() and should not be run manually.","inlinecomment":" \t &apos; Constructor. This is automatically called during extractObjects() and should not be run manually.","parentclassname":"VoltMxResultObject","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"isPreProcessor","comment":"Whether the VoltScript is being called from a preprocessor","valuetype":"Boolean","filenamebase":"isPreProcessor_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectNew","qn":"isPreProcessor","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether the VoltScript is being called from a preprocessor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether the VoltScript is being called from a preprocessor","inlinecomment":" \t &apos; Whether the VoltScript is being called from a preprocessor"}]},{"label":"setErrorMessage","comment":"Sets an error message to pass back to Foundry. Only a single string error message can be passed back.","valuetype":"","filenamebase":"setErrorMessage_Method","fqnprefix":"VoltMXObjects.VoltMxResultObject","qn":"setErrorMessage","codesample":"&amp;apos; This code is from the Foundry boilerplate\n    Try\n    Catch\n        Call VoltMxResult.setErrorMessage(getErrorMsg(&amp;quot;VOLTSCRIPT_CONNECTOR: &amp;quot;))\n    Finally\n        Print VoltMxResult.toJson().toString(false)\n    End Try","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(message As String)","signature":"Public Sub setErrorMessage(message As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets an error message to pass back to Foundry. Only a single string error message can be passed back.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets an error message to pass back to Foundry. Only a single string error message can be passed back.","inlinecomment":" \t &apos; Sets an error message to pass back to Foundry. Only a single string error message can be passed back.","parentclassname":"VoltMxResultObject","codesamplehtml":"&amp;apos; This code is from the Foundry boilerplate&lt;br /&gt;    Try&lt;br /&gt;    Catch&lt;br /&gt;        Call VoltMxResult.setErrorMessage(getErrorMsg(&amp;quot;VOLTSCRIPT_CONNECTOR: &amp;quot;))&lt;br /&gt;    Finally&lt;br /&gt;        Print VoltMxResult.toJson().toString(false)&lt;br /&gt;    End Try", "signatureelements":["Public","Sub"], "arguments":[{"label":"message","comment":"Error message to send back to the browser","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltMXObjectsVoltMxResultObjectsetErrorMessage","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error message to send back to the browser&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error message to send back to the browser","inlinecomment":" \t &apos; Error message to send back to the browser"}]}]}
