{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome","text":"<ul> <li> <p> What's New?</p> <p>Find out what's new in the latest VoltScript Volt MX Middleware release.</p> <p> Go to What's New</p> </li> <li> <p> Tutorials</p> <p>Hands-on introduction to VoltScript Volt MX Middleware.</p> <p> Go to Tutorials</p> </li> <li> <p> How-to guides</p> <p>Practical step-by-step guides for performing tasks and operation.</p> <p> Go to How-to guides</p> </li> <li> <p> Topic guides</p> <p>High-level discussion and explanation of key topics and concepts to give background information.</p> <p> Go to Topic guides</p> </li> <li> <p> References</p> <p>Technical references and descriptions on using VoltScript Volt MX Middleware.</p> <p> Go to References</p> </li> <li> <p> Using via dependency management</p> <p>For using with dependency management, see Use dependency management.</p> </li> </ul>"},{"location":"whatsnew.html","title":"What's new","text":"<p>The section provides information on the latest features, improvements, and resolved issues related to VoltScript Volt MX Middleware.</p> <p>Important</p> <p>Items marked in red are API changes that may impact your applications and should be reviewed before upgrading.</p> v1.0.3 - What's new or changed v1.0.2 - What's new or changed v1.0.1 - What's new or changed v1.0.0 - What's new or changed"},{"location":"whatsnew.html#v103","title":"v1.0.3","text":"<p>Improvements</p> <ul> <li>Integration with VoltScript Logging.</li> <li>Repointing atlas.json to demo marketplace. atlas-settings marketplace url will need updating to \"https://accounts.auth.demo-hclvoltmx.net/login\".</li> </ul>"},{"location":"whatsnew.html#v102","title":"v1.0.2","text":"<p>Improvements</p> <ul> <li>Repointing atlas.json to use VSE title and filename as library and module.</li> <li>Documentation improvements.</li> </ul>"},{"location":"whatsnew.html#v101","title":"v1.0.1","text":"<p>Improvements</p> <ul> <li>Added jsonSort function and associated classes.</li> <li>Added VSID database to repo. NOTE: jsonComparator class is not set to derived in NSF because of VSID issue. If code is regenerated from NSF, class signature and constructor signature require manual fixup.</li> <li>Repointing atlas.json from demo marketplace. atlas-settings marketplace url will need updating to \"https://accounts.auth.hclvoltmx.net/login\".</li> <li>Amended addDeviceHeader() methods to take a string.</li> </ul>"},{"location":"whatsnew.html#v100","title":"v1.0.0","text":"<ul> <li>First release version of VoltScript Volt MX Middleware.</li> </ul>"},{"location":"howto/index.html","title":"How-to guides","text":"<p>How-to guides instruct users in completing key goals and tasks relative to VoltScript Volt MX Middleware.</p> <ul> <li>Use dependency management</li> <li>Access VS Code Extension build development features</li> <li>Write VoltScript Volt MX Middleware functions</li> <li>Validate input</li> <li>Add input parameters</li> <li>Use Identity Service tokens</li> <li>Session attributes</li> <li>Return content</li> <li>Retrieve metadata from external REST service</li> <li>Add logging</li> <li>Write testable code</li> </ul>"},{"location":"howto/add-input.html","title":"Add input parameters","text":"<p>In a preprocessor, you may wish to programmatically add input parameters for a subsequent external REST service. This might be used, for example, to set a login token to an environment variable that is passed to Foundry when the server is started. The following code will allow you to do this:</p> <pre><code>Dim token as String\ntoken = Environ$(\"dbToken\")\nCall VoltMxResult.addInputParam(\"token\", token)\n</code></pre> <p>Note</p> <p>The same function is available on <code>VoltMxRequest</code> object. But that function just calls the corresponding function in VoltMxResult.</p> <p>Note</p> <p>If required, request and header parameters can also be added via <code>VoltMxResult.addRequestParam()</code>. A corresponding function again exists in <code>VoltMxRequest</code>, but again just call the <code>VoltMxResult</code> version.</p> <p>Warning</p> <p><code>VoltMxResult.addHeaderParam()</code> does not modify the header parameters passed to an external REST service. Instead it is used to set a header parameter in the response.</p>"},{"location":"howto/archipelago.html","title":"Use dependency management","text":"<p>Info</p> <p>For generic how-to information about VoltScript Dependency Management, see VoltScript documentation.</p> <p>Dependency management is available in the documentation for each project, but also aggregated here:</p>"},{"location":"howto/archipelago.html#authentication","title":"Authentication","text":"<p>You'll need a Personal Access Token to use GitHub REST APIs. You'll then need to add the following to the JSON object in your atlas-settings.json in the <code>.vss</code> directory of your user home directory:</p> <pre><code>    \"hcl-github\": {\n        \"type\": \"github\",\n        \"token\": \"${env.TOKEN}\"\n    },\n    \"volt-mx-marketplace\": {\n        \"type\": \"marketplace\",\n        \"username\": \"YOUR_USERNAME\",\n        \"password\": \"YOUR_PASSWORD\",\n        \"authUrl\": \"https://accounts.auth.demo-hclvoltmx.net/login\"\n    }\n</code></pre> <p>Tip</p> <p>Hard-coding your Personal Access Token in the atlas-settings.json file works well for initial setup and testing, but is not recommended for production.  The recommended method is to store your Personal Access Token as an environment variable, and then reference that variable using the ${env.VARIABLE_NAME} pattern as demonstrated below</p> <pre><code>\"hcl-github\": {\n    \"type\": \"github\",\n    \"token\": \"${env.TOKEN}\"\n}\n</code></pre>"},{"location":"howto/archipelago.html#repository","title":"Repository","text":"<p>You'll need to add the following to your repositories object in the <code>atlas.json</code> of your project:</p> <pre><code>{\n    \"id\": \"hcl-github\",\n    \"type\": \"github\",\n    \"url\": \"https://api.github.com/repos/HCL-TECH-SOFTWARE\"\n}\n</code></pre>"},{"location":"howto/archipelago.html#dependency","title":"Dependency","text":"<p>You'll need to add the following relevant dependency to your dependencies object in the <code>atlas.json</code> of your project:</p> <pre><code>        {\n            \"library\": \"voltscript-voltmx-middleware\",\n            \"version\": \"1.0.5\",\n            \"module\": \"VoltMXObjects.vss\",\n            \"repository\": \"hcl-github\"\n        }\n</code></pre>"},{"location":"howto/identity.html","title":"Use Identity Service tokens","text":"<p>If the integration service has an identity service mapped to it, the tokens are also passed to the VoltScript code.</p>"},{"location":"howto/identity.html#keepvse","title":"KeepVSE","text":"<p>For authenticating via KeepVSE, you do not need to extract and pass the token. KeepVSE does this for you, you just need to instantiate the <code>KeepServer</code> object and specify the server URL, for example:</p> <pre><code>Dim server as New KeepServer()\nserver.serverURL = \"http://localhost:8080/api/v1/\"\n</code></pre> <p>Note</p> <p>To write integration tests, pass the logged in KeepServer object to a function. In your integration test, log into the KeepServer manually using <code>KeepServer.login()</code> and you can verify the rest of your function runs as expected.</p>"},{"location":"howto/identity.html#other-backends","title":"Other backends","text":"<p>For other backends, you will need to extract the token from the identity service manually. This can be done with <code>VoltMxRequest.getIdentityParam()</code>.</p>"},{"location":"howto/logging.html","title":"Add logging","text":"<p>Since version 1.0.5 VoltScript Volt MX Middleware is integrated with VoltScript Logging. This comprises two parts:</p> <ul> <li>creating logs.</li> <li>outputting logs.</li> </ul> <p>Warning</p> <p>The Volt Foundry image provided in VoltScript Early Access 3 does not support integration with VoltScript Logging. If you are using VoltScript EA3, Volt Foundry code will error when trying to extract the logs.</p>"},{"location":"howto/logging.html#creating-logs","title":"Creating logs","text":"<p>Creating logs is done the same as normal in VoleScript, using <code>globalLogSession.createLogEntry()</code>. At the end of the VoltScript code, when the VoltMXResult is converted to JSON and sent back, any logs will be extracted and passed back in the <code>debugMessages</code> object. Each message will be a JSON  object comprising:</p> <ul> <li>level, 1 - 6, corresponding to the logging level.</li> <li>message, using the formatter <code>[{{LIBRARYNAME}}:{{CLASSNAME}}:{{METHODNAME}}:{{LINENUM}}] {{MESSAGE}}</code>.</li> <li>stack trace in compact format.</li> </ul> <p>During debugging, the VoltMXResult will be printed out, so you can check the logs there.</p>"},{"location":"howto/logging.html#outputting-logs","title":"Outputting logs","text":"<p>After being received by Volt Foundry, the logs will be passed to the Java logger in a consistent approach with Java and JavaScript logging. The logs will be added with the corresponding logging level.</p> <p>By default, only logs above a certain level will be added to the Volt Foundry console. To change the logging level:</p> <ul> <li>Go to Environments.</li> <li>Click on the relevant environment. The App Services console will be displayed.</li> <li>Go to Logs.</li> <li>Change the log level for the Root Logger.</li> <li>Save the changes.</li> </ul> <p>The logs will then be written to the Volt Foundry console, as with Java and JavaScript logs.</p> <p>Tip</p> <p>Setting the logging level for <code>com.hcl.voltscript</code> will set a logging level specific to logs from the Volt Foundry VoltScript servlet.</p>"},{"location":"howto/logging.html#additional-log-writers","title":"Additional log writers","text":"<p>Additional log writers can be added to the global log session, if you would like to provide alternate logging options, separate from the Volt Foundry Java loggers.</p>"},{"location":"howto/return-content.html","title":"Return content","text":"<p>The <code>VoltMXResult.result</code> JSON object is used to pass data back to the user.</p> <p>opstatus can be manipulated to return different statuses for use in the Iris application processing. Typically, a successful operation returns an opstatus as 0.</p> <p>httpStatusCode can return a specific HTTP status code, e.g. 200 for success or 400 for bad input.</p> <p>Volt MX Foundry always returns a JSON object, always including \"opstatus\" and \"httpStatusCode\". Everything else is properties within that JSON object and this is accessed via <code>VoltMXResult.result</code>. You can use the various JsonVSE methods to add scalars, arrays or objects, all with their various labels.</p> <p>Warning</p> <p>Using <code>Call VoltMXResult.result.appendToJSONArray()</code> will throw an error, because <code>result</code> is always a JSON object, not a JSON array.</p> <p>You do not need to explicitly add opstatus and httpStatusCode to the <code>VoltMXResult.result</code> object. These will automatically be appended from the relevant properties before the output is printed.</p>"},{"location":"howto/return-content.html#access-result-in-postprocessor","title":"Access result in postprocessor","text":"<p>In a postprocessor <code>VoltMxResult.result</code> will already be seeded with the output from the main integration service. You can access this and manipulate it as required.</p>"},{"location":"howto/session.html","title":"Session attributes","text":"<p>You may wish to get or set session attributes. If set, these will be available to all subsequent requests for the same Foundry session. The following code could be used to lazy load authentication to an external database:</p> <pre><code>Dim token as String\ntoken = VoltMxSession.getAttribute(\"dbToken\")\nIf (token = \"\") Then\n    ' Do something to populate the token variable\n    Call VoltMxResult.addSessionAttribute(\"dbToken\", token)\nEnd If\n' Do something with the token\n</code></pre> <p><code>VoltMxSession.addAttribute()</code> is also available, but it just calls <code>VoltMxResult.addSessionAttribute()</code>.</p>"},{"location":"howto/testable.html","title":"Write testable code","text":"<p>The recommended approach for unit testing your code is to write the code in a VoltScript Library Module instead (e.g. libs/functions.vss) and call that. You will then be able to write a unit test that:</p> <ul> <li>Calls <code>extractObjects()</code> passing a contextual JSON string (see below).</li> <li>Runs your custom function.</li> <li>Runs your unit tests against the Volt MX objects.</li> </ul>"},{"location":"howto/testable.html#retrieve-sample-input","title":"Retrieve sample input","text":"<p>You can retrieve a sample JSON string by testing the operation on Volt MX Foundry. Pass <code>\"vsTestingContext\": true</code> in the request's JSON object. The response will then be a JSON object with <code>unitTestContext</code>, which will contain the JSON object to use in your unit tests.</p> <p></p> <p>For a preprocessor / postprocessor you can call <code>VoltMxResult.echoUnitTestContext()</code> to get the <code>unitTestContext</code> object.</p>"},{"location":"howto/testable.html#run-local-test","title":"Run local test","text":"<p>If the VoltScript runtime is started with the HTTP server (using <code>--http-server</code> option), you can also run the VoltScript script from Postman. The URL should be:</p> <ul> <li><code>http://localhost:9060/run</code>, where the port maps to the HTTP port VoltScript runtime's http server is started with. Port 9060 is the default.</li> <li><code>?path=</code> plus the absolute path to the .vss file to run.</li> <li><code>&amp;seti_path=</code> plus the absolute path to the seti.ini file to use.</li> </ul> <p>The Content-Type header should be set to \"application/json\". The body should contain a JSON object, which you can retrieve by testing the operation on Volt MX Foundry. Pass <code>\"vsTestingContext\": true</code> in the request's JSON object. The response will then be a JSON object with <code>httpServerContext</code>, which will contain the JSON object to pass in Postman.</p> <p>For a preprocessor / postprocessor you can call <code>VoltMxResult.echoHttpServerContext()</code> to get the <code>httpServerContext</code> object.</p>"},{"location":"howto/validate.html","title":"Validate input","text":"<p>Input parameters should be mapped in the Request Input section of the operation. They can be accessed via <code>VoltMxRequest.getInputParam()</code>.</p> <p></p> <p>If a request parameter was passed to Foundry but not explicitly mapped in the integration service, it is still available in <code>VoltMxRequest.getRequestParam()</code>. Certain Volt MX Foundry parameters are also passed, for example the current service and app.</p> <p>Header parameters are also available via <code>VoltMxRequest.getHeaderParam()</code>.</p> <p>The following code can be used to validate a username parameter in a VoltScript preprocessor and throw an error if blank.</p> <pre><code>Dim username as String\nusername = VoltMxRequest.getInputParam(\"username\")\nIf (username = \"\") Then\n    Call VoltMxResult.setErrorMessage(\"Username is required\")\n    Return False\nEnd If\n</code></pre> <p>Note</p> <p><code>getInputParam()</code> returns an empty string if no parameter with the corresponding name can be found.</p> <p>Note</p> <p>For a VoltScript integration service or postprocessor, change line 5 from <code>Return False</code> to <code>Return</code>.</p>"},{"location":"howto/voltmxresponse.html","title":"Retrieve metadata from external REST service","text":"<p>The <code>VoltMxResponse</code> object is used in a postprocessor to access the headers and device headers from the external REST service call.</p> <p>Note</p> <p>The <code>VoltMxResponse</code> object is not used to retrieve the body response from the external REST service. Use the <code>VoltMXResult.result</code> JSON object for this.</p>"},{"location":"howto/voltmxresponse.html#check-return-status","title":"Check return status","text":"<p>You can check the response code returned by using <code>VoltMxResponse.getStatusCode()</code>. The following code would abort processing if status code was not 200.</p> <pre><code>If (VoltMxResponse.getStatusCode != 200) Then Return\n</code></pre>"},{"location":"howto/voltmxresponse.html#header-parameters","title":"Header parameters","text":"<p>Response header parameters can also be accessed and manipulated. Of course, headers will currently be blank unless running in a postprocessor.</p> <ul> <li><code>VoltMxResponse.getHeaderParam()</code> will retrieve a parameter from the main response.</li> <li><code>VoltMxResult.addHeaderParam()</code> can add a header. The is also called by the corresponding function in <code>VoltMxResponse</code>.</li> <li><code>VoltMxResponse.getDeviceHeaderParam()</code> will retrieve a device header parameter from the main response.</li> <li><code>VoltMxResult.addDeviceHeaderParam()</code> can add a device header. The is also called by the corresponding function in <code>VoltMxResponse</code>.</li> </ul>"},{"location":"howto/vs-code.html","title":"Access VS Code Extension build development features","text":"<p>The Visual Studio Code Build Management Extension provides various functionality for speeding up development.</p>"},{"location":"howto/vs-code.html#atlasjson","title":"atlas.json","text":"<p>The first is an atlas.json snippet template. This can be accessed by creating an atlas.json, typing <code>foundry-atlas</code> and accepting the snippet.</p> <p>The snippet automatically adds the dependencies and repository for VoltMXObjects.</p>"},{"location":"howto/vs-code.html#foundry-script-boilerplate","title":"Foundry script boilerplate","text":"<p>The second is a script snippet template for writing a VoltScript integration service. The snippet:</p> <ul> <li>Adds required <code>Use</code> and <code>UseVSE</code> statements.</li> <li>Adds a <code>Sub Initialize</code> with the boilerplate code for extracting Foundry objects and sending back a response.</li> </ul> <p>This can be accessed by creating a script file, typing <code>foundry</code> and accepting the snippet.</p>"},{"location":"howto/vs-code.html#package-for-foundry","title":"Package for Foundry","text":"<p>This is a command accessed from the Visual Studio Code Command Palette when you are in the <code>atlas.json</code> or a <code>.vss</code> file. The process:</p> <ul> <li>Prompts for the project directory.</li> <li>Prompts for the location of the `atlas.json``.</li> <li>Creates a zip file comprising:<ul> <li><code>atlas.json</code></li> <li><code>seti.ini</code></li> <li>src directory</li> <li>libs directory</li> <li>vses directory</li> </ul> </li> </ul> <p>The zip file is named using the <code>name</code> and <code>version</code> in the <code>atlas.json</code>. For example, if the <code>name</code> is vss-poc and the <code>version</code> is 1.0.0, the filename of the zip file will be vss-poc-1.0.0.zip. The zip file is placed in the root of the project directory and ready to be uploaded to Foundry.</p>"},{"location":"howto/writing.html","title":"Write VoltScript Volt MX Middleware functions","text":"<p>VoltScript can be used in Integration Services or preprocessors and postprocessors.</p> <ul> <li>Integration services are REST service operations coded completely in VoltScript.</li> <li>VoltScript preprocessors are VoltScript functions run before triggering an external REST service call. They return true (the default) to continue processing or false to abort processing.</li> <li>VoltScript postprocessors are VoltScript functions run after triggering an external REST service call. Typically they will be used to manipulate the result from the REST service call. There is no subsequent process, so <code>Return False</code> has no effect.</li> </ul> <p>A VoltScript integration service is uploaded to Foundry as a zip file. Each main script maps to an operation.</p> <p>A Foundry boilerplate snippet is available in the VoltScript VSCode extension.  This snippet provides the initial code necessary for parsing an incoming Foundry JSON object and returning the result back to Foundry.  It can be accessed by typing <code>foundry boilerplate</code> in an empty .vss file. For details on what the boilerplate does, see Understanding the boilerplate.</p> <p>Comment blocks identify where you should put your custom code.</p> <p>Note</p> <p>A single main script could be used for multiple operations, if desired. processing might vary based on a query string parameter passed, for example.</p>"},{"location":"references/index.html","title":"References","text":"<p>References provide technical references and descriptions for using VoltScript Volt MX Middleware.</p>"},{"location":"references/index.html#repository-structure","title":"Repository structure","text":"<ul> <li>All the required code itself is in the VoltScript files in <code>src</code> directory.</li> <li>Tests are in test directory. Output are written to unit-test-reports directory.</li> </ul>"},{"location":"references/index.html#dependency-management","title":"Dependency management","text":"<p>For using VoltScript Volt MX Middleware via VoltScript Build Manager extension in Visual Studio Code, follow the instruction on the how-to guide.</p>"},{"location":"references/index.html#api-documentation","title":"API documentation","text":"<ul> <li>VoltScript Volt MX Middleware Class Documentation</li> </ul>"},{"location":"references/index.html#unit-test-output","title":"Unit test output","text":"<ul> <li>VoltScript Volt MX Middleware Extraction Unit Tests</li> <li>VoltScript Volt MX Middleware Update Unit Tests</li> </ul>"},{"location":"references/index.html#faqs","title":"FAQs","text":"<p>List of frequently asked questions related to VoltScript Volt MX Middleware.  </p>"},{"location":"references/index.html#documentation-and-source-code","title":"Documentation and source code","text":"<ul> <li>HCL Volt MX Go Documentation</li> <li>VoltScript</li> <li>VoltScript Testing Framework<ul> <li>Documentation</li> <li>Source code</li> </ul> </li> <li>VoltScript Collections<ul> <li>Documentation</li> <li>Source code</li> </ul> </li> <li>VoltScript JSON Converter<ul> <li>Documentation</li> <li>Source code</li> </ul> </li> <li>VoltScript Console Colors<ul> <li>Source code</li> </ul> </li> <li>VoltScript Interface Designer<ul> <li>Documentation</li> </ul> </li> <li>VoltScript Logging<ul> <li>Documentation</li> <li>Source code</li> </ul> </li> </ul>"},{"location":"references/index.html#support","title":"Support","text":"<p>To share information, ask questions, and learn about VoltScript Volt MX Middleware, go to the Community.</p>"},{"location":"references/FAQs.html","title":"FAQs","text":""},{"location":"references/FAQs.html#print-statements","title":"Print statements","text":"<p>Volt MX Foundry passes a JSON object across to the VoltScript runtime and expects a JSON object in return. Additional <code>Print</code> statements in your VoltScript code returns an invalid JSON object that corrupts the output.</p>"},{"location":"topicguides/index.html","title":"Topic guides","text":"<p>Topic guides discuss and explain topics and concepts about VoltScript Volt MX Middleware.</p> <ul> <li>Aims for VoltScript Volt MX Middleware</li> <li>Foundry processing</li> <li>Understanding the boilerplate</li> <li>Volt MX Objects</li> </ul> <p>For more information about writing VoltScript for Foundry, see the VoltScript documentation.</p>"},{"location":"topicguides/aims.html","title":"Aims for VoltScript Volt MX Middleware","text":"<ul> <li> <p>Provides bootstrap code for handling incoming data from Foundry:</p> <ul> <li>Current project directory, required because <code>CurDir</code> maps to the directory of the running VoltScript program</li> <li>Session information</li> <li>HTTP request headers</li> <li>Service input parameters and parameters specifically mapped in the integration service</li> <li>HTTP request parameters and all request parameters that are part of the Foundry HTTP request</li> <li>HTTP response headers and device headers</li> </ul> </li> <li> <p>Integrate Volt MX Logging seamlessly with the normal Volt MX Foundry logging.</p> </li> <li>Utilizes VoltMX Result Object for updating the Volt MX Foundry objects.</li> </ul>"},{"location":"topicguides/boilerplate.html","title":"Understanding the boilerplate","text":"<p>The Foundry boilerplate snippet provides the boilerplate code for a VoltScript integration service in Foundry.</p>"},{"location":"topicguides/boilerplate.html#boilerplate-snippet","title":"Boilerplate snippet","text":"<pre><code>Option Declare\nOption Public\n\nUse \"../libs/VoltMXObjects\"\nUseVSE \"*ContextVSE\"\n\nSub Initialize\n    Dim ctx as New Context()\n    Dim data as String\n\n    Try\n        data = ctx.Context\n        Call extractObjects(data, false)\n\n        '****************\n        'START OF FOUNDRY HANDLER\n        '****************\n\n        '****************\n        'END OF FOUNDRY HANDLER\n        '****************\n\n    Catch\n        Call VoltMxResult.setErrorMessage(getErrorMsg(\"VOLTSCRIPT_CONNECTOR: \"))\n    Finally\n        Print VoltMxResult.toJson().toString(false)\n    End Try\nEnd Sub\n\nPrivate Function getErrorMsg(prefix as String) as String\n    If (Instr(Error(), \"line \") &gt; 0) Then\n        Return Error()\n    End If\n    Return prefix &amp; \" ERROR: \" &amp; Error() &amp; \" (\" &amp; Err() &amp; \"), line \" &amp; Erl()\nEnd Function\n</code></pre>"},{"location":"topicguides/boilerplate.html#explanation","title":"Explanation","text":"<ul> <li>Options are set in line 1 and 2.</li> <li>Dependencies are added in lines 4 and 5.</li> <li> <p>Context is created in line 8 and the data loaded into the <code>data</code> string at line 12.</p> <ul> <li>If a JWT Token is passed in the context it will be automatically passed to a new <code>KeepServer</code> object.</li> </ul> </li> <li> <p>The <code>extractObjects()</code> method is called at line 13.  This instantiates the VoltMXRequest, VoltMXSession, VoltMXResponse and VoltMXResult objects using content from the passed JSON object.  Calling this method is extremely important; failure to do so will lead to erratic behavior or failures in your VoltScript code.</p> </li> <li>Custom code can be entered in the area between the comments, at line 18.</li> <li>If an error occurs, <code>VoltMXResult.setMessage()</code> is called at line 24, parsing the error using the <code>getErrorMsg()</code> function.</li> <li>The VoltMXResult object is converted to a JSON string and printed out. The VoltScript runtime passes this back to Foundry.</li> </ul>"},{"location":"topicguides/foundry.html","title":"Foundry processing","text":"<p>Foundry sends HTTP requests across to the VoltScript runtime for processing. The approach is the same for preprocessors, integration services and postprocessors.</p> <pre><code>sequenceDiagram\n    autonumber\n    UI-&gt;&gt;Foundry: REST service request\n    Foundry-&gt;&gt;Foundry: Convert context to JSON\n    Foundry-&gt;&gt;VoltScript: Send HTTP request with Foundry context\n    VoltScript-&gt;&gt;VoltScript: Process custom VoltScript code\n    VoltScript-&gt;&gt;Foundry: Send result JSON object\n    Foundry-&gt;&gt;Foundry: Parse response and continue, if appropriate\n    Foundry-&gt;&gt;UI: Send response / error</code></pre> <p>Note</p> <p>Preprocessors and postprocessors cannot be added to a VoltScript Integration Service in Foundry. Instead, add the relevant validation or manipulation in the main VoltScript Integration Service code. This will minimize the processing time.</p> <p>If <code>VoltMxResult.setErrorMessage()</code> is called, an error is returned from the Integration Service and no further steps in the process will be performed. So the processing is:</p> <pre><code>sequenceDiagram\n    participant UI\n    participant Foundry\n    participant is as Integration Service \n    autonumber\n    UI-&gt;&gt;Foundry: REST service request\n    Foundry-&gt;&gt;is: Trigger preprocessor\n    is-&gt;&gt;Foundry: Sends result\n    opt VoltMxResult.setErrorMessage(\"an error\")\n    Foundry-&gt;&gt;UI: Send response\n    end\n    Foundry-&gt;&gt;is: Trigger main integration service\n    is-&gt;&gt;Foundry: Send result\n    Foundry-&gt;&gt;is: Trigger postprocessor\n    is-&gt;&gt;Foundry: Send result\n    Foundry-&gt;&gt;UI: Send response</code></pre>"},{"location":"topicguides/voltmxobjects.html","title":"Volt MX Objects","text":"<p>The Volt MX Objects are a set of VoltScript Classes used for integrating with Volt MX Foundry. They are middleware specific classes, targeted specifically for VoltScript Integration Services.</p> <p>These classes are contained within the VoltMXObjects Library Module, and are instantiated when the extractObjects() method is called.  </p> <p>Important</p> <p>If the extractObject() method is not called, these objects will not be instantiated correctly; which will result in erratic behavior or failure of your VoltScript code.</p>"},{"location":"topicguides/voltmxobjects.html#voltmx-classes","title":"VoltMX Classes","text":"<p>The VoltMX Classes are as follows:</p> <ul> <li> <p>VoltMX Request Object for interacting with the Foundry request.</p> </li> <li> <p>VoltMX Response Object for interacting with the Volt MX response.</p> </li> <li> <p>VoltMX Result Object for manipulating integration service results and passing content back to Foundry.</p> </li> <li> <p>VoltMX Session Object for interacting with Foundry session content.</p> </li> </ul>"},{"location":"tutorials/index.html","title":"Tutorials","text":"<p>Tutorials give hands-on introduction on how to use VoltScript Volt MX Middleware.</p> <p>See the Developing VoltScript for Foundry tutorial in the main VoltScript documentation.</p> <ul> <li>JSON Sort - The Basics</li> <li>JSON Sort - Using Label Paths</li> </ul>"},{"location":"tutorials/sortbasics.html","title":"JSON Sort - The Basics","text":""},{"location":"tutorials/sortbasics.html#prerequisites","title":"Prerequisites","text":"<ol> <li>Download the VoltScript-Json-Sort repository from GitHub</li> <li>Set up your VS Code environment including running Archipelago - Install Dependencies to ensure you have all of the necessary dependencies available (high level instructions below)</li> <li>Basic understanding of VoltScript and Json object structure</li> </ol>"},{"location":"tutorials/sortbasics.html#objectives","title":"Objectives","text":"<ol> <li>Gain experience working with VoltScript in the Visual Studio Code environment</li> <li>Learn about working with VoltScript Extensions - specifically JsonVSE</li> <li>Gain familiarity with using jsonSort() to sort an array of JSON objects</li> </ol>"},{"location":"tutorials/sortbasics.html#project-setup","title":"Project setup","text":"<ol> <li>Ensure your atlas-settings.json is set up with authentication for Volt MX Marketplace and github.com</li> <li>Create a folder for the project.</li> <li>Create an atlas.json and complete mandatory elements. Set <code>sourceDir</code> to \"src\", <code>libsDir</code> to \"libs\" and <code>vsesDir</code> to \"vses\".</li> <li> <p>In the repositories element, add the following repository:</p> <pre><code>{\n        \"id\": \"hcl-github\",\n        \"type\": \"github\",\n        \"url\": \"https://api.github.com/repos/HCL-TECH-SOFTWARE\"\n    }\n</code></pre> </li> <li> <p>In the dependencies element, add the following dependency:</p> <pre><code>        {\n        \"library\": \"voltscript-testing\",\n        \"version\": \"latest\",\n        \"module\": \"VoltScriptTesting.vss\",\n        \"repository\": \"hcl-github\"\n    }\n</code></pre> </li> <li> <p>Save the atlas.json and ensure no validation errors.</p> </li> <li>Run dependency management (CTRL + SHIFT + P / Cmd + SHIFT + P and choose \"VoltScript: Install Dependencies\").</li> <li>Ensure libs contains \"VoltScriptCollections\" and vses contains the JsonVSE extensions.</li> </ol>"},{"location":"tutorials/sortbasics.html#script-setup","title":"Script setup","text":"<ol> <li>Create a VoltScript file in src directory called <code>jsonSortTutorial.vss</code>.</li> <li>Add <code>Option Public</code> and <code>Option Declare</code>.</li> <li>Add a USE statement to point to your VotScriptJsonSort.vss library. If you're using this doc repository, then <code>Use \"VoltScriptJsonSort\"</code> (omit the .vss extension) should work.</li> </ol> <p>Note</p> <p>The VoltScriptJsonSort library uses the JsonVSE extension, which means that functionality is available for loading and working with Json files and objects.</p>"},{"location":"tutorials/sortbasics.html#load-the-example-json-file","title":"Load the example JSON file","text":"<ol> <li>Create a Sub Initialize() sub</li> <li>Add a JsonParser object (parser) and a Json data object (dataObj) - these will be used to load our example JSON file into memory as an array of Json objects</li> <li>Add a String variable to hold our file path to our example JSON file (<code>TEST_DATA1.json</code>)</li> <li>Set up the path to the example JSON file</li> <li>Set up a Try...Catch block</li> <li>Use the Parser object to load the JSON file into the dataObj object variable</li> <li> <p>Let's add a PRINT statement after the load to make sure we loaded 100 records into our JSON object (dataobj)</p> load example JSON file into memory <pre><code>Sub Initialize()\n    Dim parser as New JsonParser()\n    Dim dataobj as New JsonObject(true)\n    Dim fpath as String\n\n    Try\n        fpath = CurDir() &amp; \"/src/TEST_DATA1.json\"\n        Call parser.loadFromFile(fpath)\n        Set dataObj = parser.getRootObject()\n        Print \"COUNT: \" &amp; dataObj.childCount()\n\n    Catch\n        Print \"Error \" &amp; Error() &amp; \" on line \" &amp; Erl()\n    End Try\nEnd Sub\n</code></pre> </li> <li> <p>Let's run our code and make sure our JSON file loaded correctly by seeing what count we get. With your cursor in the Initialize() sub, type CTRL+F5, and hit ENTER. A Terminal window will appear at the bottom of VS Code, and you should see where your code was called, and <code>COUNT: 100</code> was returned.</p> </li> </ol>"},{"location":"tutorials/sortbasics.html#set-up-the-sort-labels","title":"Set up the Sort Labels","text":"<p>Now that we have our example JSON file loaded into memory, let's set up our labels for sorting. JsonSort() allows you to sort your array of JSON objects up two three levels deep. So, if you open and take a look at <code>TEST_DATA1.JSON</code> you'll notice that the JSON objects are basically a contact list. So, let's say that we want to sort first on STATE, then CITY, and finally COMPANY.</p> <ol> <li>Begin by adding a String array variable with three elements to hold our sort labels. Using this array will make it easier to read, and easier for us to change the labels around later. Let's call this string array <code>labels()</code></li> <li>Now set up the values in our labels() array of <code>state</code>, then <code>city</code>, then <code>company</code></li> </ol> <p>Now our TRY block should look something like this...</p> try block with labels defined <pre><code>Try\n    fpath = CurDir() &amp; \"/src/TEST_DATA1.json\"\n    Call parser.loadFromFile(fpath)\n    Set dataObj = parser.getRootObject()\n    Print \"count: \" &amp; dataObj.childCount()\n\n    labels(0) = \"state\"\n    labels(1) = \"city\"\n    labels(2) = \"company\"\n</code></pre>"},{"location":"tutorials/sortbasics.html#sort-the-json-array-using-jsonsort","title":"Sort the JSON Array using jsonSort()","text":"<p>We're ready to sort our array. Now the signature for the <code>jsonSort()</code> function is as follows:</p> <pre><code>Function jsonSort(dataObj as JsonObject, _ \n    lbl1 as String, lbl1Desc as Boolean, lbl2 as String, lbl2Desc as Boolean, _\n    lbl3 as String, lbl3Desc as Boolean, delim as String) as JsonObject\n</code></pre> <p>Where:</p> <ul> <li><code>dataObj</code> - The JSON object to be sorted</li> <li><code>lbl1</code> - The first label to sort on</li> <li><code>lbl1Desc</code> - True if the sort should be descending, False if ascending</li> <li><code>lbl2</code> - The second label to sort on. Optional. If not provided, lbl2 will be set to \"\"</li> <li><code>lbl2Desc</code> - True if the sort should be descending, False if ascending</li> <li><code>lbl3</code> - The third label to sort on. Optional. If not provided, lbl3 will be set to \"\"</li> <li><code>lbl3Desc</code> - True if the sort should be descending, False if ascending</li> <li><code>delim</code> - The delimiter to use for the labels. Optional. If not provided, delim will be set to \"/\"</li> </ul> <p>Now let's add jsonSort() to our code.</p> <ol> <li>Add a new JsonObject variable called <code>sortobj</code>. Your DIM statement should look like <code>Dim sortobj as JsonObject</code></li> <li>Call <code>jsonSort</code> setting the result to our new <code>sortobj</code> variable.</li> <li>For this first time, let's set all of the Ascending/Descending flags to False, so they will all be sorted to Ascending</li> <li> <p>You can set the <code>delim</code> parameter to an empty string (\"\"), as we're not using it right now. The new line should look like this:</p> <pre><code>    Set sortobj = jsonSort(dataobj, labels(0), False, labels(1), False, labels(2), False, \"\")\n</code></pre> </li> <li> <p>You could try running the code again at this point (using CTRL + F5, ENTER) to make sure you have no errors if you want.</p> </li> </ol> <p>Now that we have it sorted, let's add some code to print out a sample size of our sorted array, to make sure it worked.</p>"},{"location":"tutorials/sortbasics.html#print-a-sample-of-the-output","title":"Print a sample of the output","text":"<p>We can print out a subset of our sorted JSON object array to make sure it worked correctly. Let's build a loop with a preset number of records that we would like to print out.</p>"},{"location":"tutorials/sortbasics.html#set-up-the-variables","title":"Set up the variables","text":"<p>Let's begin by setting up the variables we'll need for this loop. They include:</p> <ul> <li><code>results()</code> - a String array of three elements to hold our results</li> <li><code>tmpObj</code> - a temporary JSON Object used to access each child object as we iterate through the array</li> <li><code>rvar</code> - a variant to hold the Scalar Value of the corresponding label during iteration</li> <li><code>i</code> and <code>z</code> - Integer variables used to limit our iteration</li> </ul> <p>Your updated variable declarations should look something like this:</p> <pre><code>    Dim parser as New JsonParser()\n    Dim dataobj as New JsonObject(true)\n    Dim fpath as String\n    Dim labels(2) as String\n    Dim sortobj as JsonObject\n    Dim results(2) as String\n    Dim tmpobj as JsonObject\n    Dim rvar as Variant, i as Integer, z as Integer\n</code></pre> <p>Now that we have our variables declared, let's begin building our output loop.</p>"},{"location":"tutorials/sortbasics.html#build-the-output-loop","title":"Build the output loop","text":"<p>We're going to use a Forall loop to print a sample of our sorted JSON object array. Within this look we need to do the following for each label:</p> <ul> <li>Check to make sure there's a label available</li> <li>Check to make sure the label is a child of the current JSON object</li> <li>If it's available, get the Scalar Value of that label</li> <li>Check to make sure the returned Scalar Value is not EMPTY</li> <li>At any point if something isn't available set the results to <code>*EMPTY*</code>, otherwise set the results to the retrieved value</li> <li>Once we have all of the values for each label, print it out</li> <li>Add a check at the end to exit the loop once we've reached the desired number of sample values</li> </ul> <p>Now, that's a lot of stuff to consider. Given the size of this, here's an example of the completed code that you can copy, paste, run, and study to understand how it all works.</p> Completed JSON Sort - The Basics Example <pre><code>    Option Public\n    Option Declare\n\n    Use \"VoltScriptJsonSort\"\n\n    Sub Initialize()\n        Dim parser as New JsonParser()\n        Dim dataobj as New JsonObject(true)\n        Dim fpath as String\n        Dim labels(2) as String\n        Dim sortobj as JsonObject\n        Dim results(2) as String\n        Dim tmpobj as JsonObject\n        Dim rvar as Variant, i as Integer, z as Integer\n\n        Try\n            fpath = CurDir() &amp; \"/src/TEST_DATA1.json\"\n            Call parser.loadFromFile(fpath)\n            Set dataObj = parser.getRootObject()\n            Print \"count: \" &amp; dataObj.childCount()\n\n            labels(0) = \"state\"\n            labels(1) = \"city\"\n            labels(2) = \"company\"\n\n            z = 10  ' how many example entries to print\n\n            Set sortobj = jsonSort(dataobj, labels(0), False, labels(1), False, labels(2), False, \"\")\n\n            Forall obj in sortobj.GetChildren()   \n                Set tmpobj = obj ' obj is a variant - setting it to tmpobj to give us access to JsonObject methods\n\n                ' Check to make sure there's a label available\n                ' At any point if something isn't available set the results to `*EMPTY*`\n                If labels(0) = \"\" Then  \n                    results(0) = \"*empty*\"\n                Else\n                    ' Check to make sure the label is a child of the current JSON object\n                    If tmpobj.isChild(labels(0)) Then\n                        'If it's available, get the Scalar Value of that label\n                        rvar = tmpobj.getChild(labels(0)).ScalarValue\n                        ' Check to make sure the returned Scalar Value is not EMPTY\n                        If isEmpty(rvar) Then \n                            results(0) = \"*empty*\"\n                        Else\n                            results(0) = Cstr(rvar)\n                        End If\n                    End IF\n                End If\n\n                If labels(1) = \"\" Then\n                    results(1) = \"*empty*\"\n                Else\n                    If tmpobj.isChild(labels(1)) Then\n                        rvar = tmpobj.getChild(labels(1)).ScalarValue\n                        If isEmpty(rvar) Then \n                            results(1) = \"*empty*\"\n                        Else\n                            results(1) = Cstr(rvar)\n                        End If\n                    End IF\n                End If\n\n                If labels(2) = \"\" Then\n                    results(2) = \"*empty*\"\n                Else\n                    If tmpobj.isChild(labels(2)) Then\n                        rvar = tmpobj.getChild(labels(2)).ScalarValue\n                        If isEmpty(rvar) Then \n                            results(2) = \"*empty*\"\n                        Else\n                            results(2) = Cstr(rvar)\n                        End If\n                    End IF\n                End If  \n\n                ' Once we have all of the values for each label, print it out\n                Print \"state: \" &amp; results(0) &amp; \", city: \" &amp; results(1) &amp; \", company: \" &amp; results(2)\n\n                ' Add a check at the end to exit the loop once we've reached the desired number of sample values\n                i++\n                If i = z Then Exit ForAll\n            End Forall\n\n        Catch\n            Print \"Error \" &amp; Error() &amp; \" on line \" &amp; Erl()\n        End Try\n    End Sub\n</code></pre>"},{"location":"tutorials/sortpaths.html","title":"JSON Sort - Using Label Paths","text":""},{"location":"tutorials/sortpaths.html#prerequisites","title":"Prerequisites","text":"<ol> <li>Download the VoltScript-Json-Sort repository from GitHub</li> <li>Set up your VS Code environment including running Archipelago - Install Dependencies to ensure you have all of the necessary dependencies available (completed in The Basics tutorial)</li> <li>Basic understanding of VoltScript and Json object structure</li> <li>Completed Sort Basics Tutorial</li> </ol>"},{"location":"tutorials/sortpaths.html#objectives","title":"Objectives","text":"<ol> <li>Build on knowledge gained in JSON Sort - The Basics tutorial</li> <li>Understand how to use label paths to sort on nested JSON objects</li> <li>Learn how to use <code>jsonObject.isDescendantPath()</code> and <code>jsonObject.getDescendantPath()</code></li> </ol>"},{"location":"tutorials/sortpaths.html#introduction","title":"Introduction","text":"<p>In The Basics tutorial we built a working example using jsonSort(), and used \"first level\" labels to sort our example JSON array. But what if your JSON array has a \"nested\" object, similar to the example below - and you want to sort on the City and State?</p> <pre><code>    {\n        \"company\": \"Yotz\",\n        \"firstName\": \"Germaine\",\n        \"lastName\": \"Pirelli\",\n        \"email\": \"gpirelli0@gmpg.org\",\n        \"gender\": \"Agender\",\n        \"salary\": \"$89175.71\",\n        \"address\": {\n            \"street1\": \"99106 Upham Center\",\n            \"street2\": null,\n            \"city\": \"New York City\",\n            \"state\": \"New York\",\n            \"zip\": \"10029\"\n        }\n    }\n</code></pre> <p>That's where label paths come in. jsonSort() has the ability for you to provide a delimited \"path\" to the label on which you wish to sort. And the JsonObject class has methods to help you access these label path values. Let's take a look...</p>"},{"location":"tutorials/sortpaths.html#before-we-begin","title":"Before we begin","text":"<p>We're going to build upon the work we did in The Basics tutorial. If you didn't actually complete the tutorial, here's the completed code from it - assuming you've already set up your VS Code environment and loaded the necessary files, simply copy this code and paste it into VS Code.</p> Completed JSON Sort - The Basics Example <pre><code>    Option Public\n    Option Declare\n\n    Use \"VoltScriptJsonSort\"\n\n    Sub Initialize()\n        Dim parser as New JsonParser()\n        Dim dataobj as New JsonObject(true)\n        Dim fpath as String\n        Dim labels(2) as String\n        Dim sortobj as JsonObject\n        Dim results(2) as String\n        Dim tmpobj as JsonObject\n        Dim rvar as Variant, i as Integer, z as Integer\n\n        Try\n            fpath = CurDir() &amp; \"/src/TEST_DATA1.json\"\n            Call parser.loadFromFile(fpath)\n            Set dataObj = parser.getRootObject()\n            Print \"count: \" &amp; dataObj.childCount()\n\n            labels(0) = \"state\"\n            labels(1) = \"city\"\n            labels(2) = \"company\"\n\n            z = 10  ' how many example entries to print\n\n            Set sortobj = jsonSort(dataobj, labels(0), False, labels(1), False, labels(2), False, \"\")\n\n            Forall obj in sortobj.GetChildren()   \n                Set tmpobj = obj ' obj is a variant - setting it to tmpobj to give us access to JsonObject methods\n\n                ' Check to make sure there's a label available\n                ' At any point if something isn't available set the results to `*EMPTY*`\n                If labels(0) = \"\" Then  \n                    results(0) = \"*empty*\"\n                Else\n                    ' Check to make sure the label is a child of the current JSON object\n                    If tmpobj.isChild(labels(0)) Then\n                        'If it's available, get the Scalar Value of that label\n                        rvar = tmpobj.getChild(labels(0)).ScalarValue\n                        ' Check to make sure the returned Scalar Value is not EMPTY\n                        If isEmpty(rvar) Then \n                            results(0) = \"*empty*\"\n                        Else\n                            results(0) = Cstr(rvar)\n                        End If\n                    End IF\n                End If\n\n                If labels(1) = \"\" Then\n                    results(1) = \"*empty*\"\n                Else\n                    If tmpobj.isChild(labels(1)) Then\n                        rvar = tmpobj.getChild(labels(1)).ScalarValue\n                        If isEmpty(rvar) Then \n                            results(1) = \"*empty*\"\n                        Else\n                            results(1) = Cstr(rvar)\n                        End If\n                    End IF\n                End If\n\n                If labels(2) = \"\" Then\n                    results(2) = \"*empty*\"\n                Else\n                    If tmpobj.isChild(labels(2)) Then\n                        rvar = tmpobj.getChild(labels(2)).ScalarValue\n                        If isEmpty(rvar) Then \n                            results(2) = \"*empty*\"\n                        Else\n                            results(2) = Cstr(rvar)\n                        End If\n                    End IF\n                End If  \n\n                ' Once we have all of the values for each label, print it out\n                Print \"state: \" &amp; results(0) &amp; \", city: \" &amp; results(1) &amp; \", company: \" &amp; results(2)\n\n                ' Add a check at the end to exit the loop once we've reached the desired number of sample values\n                i++\n                If i = z Then Exit ForAll\n            End Forall\n\n        Catch\n            Print \"Error \" &amp; Error() &amp; \" on line \" &amp; Erl()\n        End Try\n    End Sub\n</code></pre>"},{"location":"tutorials/sortpaths.html#change-the-file-path-and-labels","title":"Change the file path and labels","text":"<p>The first thing we need to do is change the file path to point to our new JSON data file. After that, let's modify the labels we use for the sort to use paths. We also need to specify the delimiter we're using to separate the parts of the label path - in this case we're using a forward slash (<code>/</code>).</p> <p>Note</p> <p>The default delimiter is a forward slash; but since a forward slash is an allowed character in a JSON label, you may need to provide a different delimiter.</p> <ol> <li>Change the <code>fpath</code> variable so that it points to <code>TEST_DATA2.json</code></li> <li>Change <code>labels(0)</code> to <code>company</code></li> <li>Change <code>labels(1)</code> to <code>address/state</code></li> <li>Change <code>labels(2)</code> to <code>address/city</code></li> <li>Create a new string variable called <code>delim</code>, and set it to a forward slash (<code>/</code>)</li> </ol> <p>The beginning of your code should now look something like this...</p> <pre><code>    Dim parser as New JsonParser()\n    Dim dataobj as New JsonObject(true)\n    Dim fpath as String\n    Dim labels(2) as String\n    Dim sortobj as JsonObject\n    Dim results(2) as String\n    Dim tmpobj as JsonObject\n    Dim rvar as Variant, i as Integer, z as Integer\n    Dim delim as string\n\n    Try\n        fpath = CurDir() &amp; \"/src/TEST_DATA2.json\"\n        Call parser.loadFromFile(fpath)\n        Set dataObj = parser.getRootObject()\n        Print \"count: \" &amp; dataObj.childCount()\n\n        labels(0) = \"company\"\n        labels(1) = \"address/state\"\n        labels(2) = \"address/city\"\n        delim = \"/\"\n</code></pre>"},{"location":"tutorials/sortpaths.html#verifying-and-retrieving-label-path-values","title":"Verifying and retrieving label path values","text":"<p>In our Basics code we used <code>jsonObject.isChild()</code> and <code>jsonObject.getChild()</code> to verify and retrieve label values; however these calls only work for first-level labels. In order for us to access values from a label path, we need to use different calls - <code>jsonObject.isDescendantPath()</code> and <code>jsonObject.getDescendantPath()</code>.</p> <p>Note</p> <p><code>jsonObject.isDescendantPath()</code> and <code>jsonObject.getDescendantPath()</code> will work with first-level labels as well, such as <code>company</code> in our example.</p> <p>We will need to replace all calls to <code>isChild()</code> with <code>isDescendantPath()</code>, and all calls to <code>getChild()</code> with <code>getDescendantPath()</code>. We also need to add the <code>delim</code> parameter to the <code>jsonSort()</code> call.</p> <ol> <li>Change the last parameter of the <code>jsonSort()</code> call from and empty string (<code>\"\"</code>) to <code>delim</code></li> <li>In each of the three label blocks, change <code>tmpobj.isChild</code> to <code>tmpobj.isDescendantPath</code></li> <li>In each of the three label blocks, change <code>tmpobj.getChild</code> to <code>tmpobj.getDescendantPath</code></li> </ol> <p>The call to <code>jsonSort()</code> should now look like this:</p> <pre><code>    Set sortobj = jsonSort(dataobj, labels(0), False, labels(1), False, labels(2), False, delim)\n</code></pre> <p>And each of the label code blocks should look like this:</p> <pre><code>    If labels(0) = \"\" Then  \n        results(0) = \"*empty*\"\n    Else\n        ' Check to make sure the label is a child of the current JSON object\n        If tmpobj.isDescendantPath(labels(0)) Then\n            'If it's available, get the Scalar Value of that label\n            rvar = tmpobj.getDescendantPath(labels(0)).ScalarValue\n            ' Check to make sure the returned Scalar Value is not EMPTY\n            If isEmpty(rvar) Then \n                results(0) = \"*empty*\"\n            Else\n                results(0) = Cstr(rvar)\n            End If\n        End IF\n    End If\n</code></pre>"},{"location":"tutorials/sortpaths.html#one-more-thing-to-fix","title":"One more thing to fix","text":"<p>The last small change we need to make is the example printout labels. Change the Print line from this:</p> <pre><code>    Print \"state: \" &amp; results(0) &amp; \", city: \" &amp; results(1) &amp; \", company: \" &amp; results(2)\n</code></pre> <p>To this:</p> <pre><code>    Print \"company: \" &amp; results(0) &amp; \", state: \" &amp; results(1) &amp; \", city: \" &amp; results(2)\n</code></pre>"},{"location":"tutorials/sortpaths.html#test-our-code","title":"Test our code","text":"<p>Now let's take a look at our results. With your cursor in your code, type CTRL + F5, and hit ENTER. You should get results like this:</p> <pre><code>count: 100\ncompany: *empty*, state: California, city: Salinas\ncompany: *empty*, state: California, city: San Jose\ncompany: *empty*, state: California, city: San Mateo\ncompany: *empty*, state: Connecticut, city: Stamford\ncompany: *empty*, state: New Mexico, city: Albuquerque\ncompany: *empty*, state: New York, city: Brooklyn\ncompany: *empty*, state: New York, city: Rochester\ncompany: *empty*, state: Oregon, city: Beaverton\ncompany: *empty*, state: Texas, city: Garland\ncompany: *empty*, state: Texas, city: Houston\n</code></pre> <p>Now notice that the company tags all say <code>\"*empty*\"</code> - that's because some of our company values are <code>null</code>. <code>jsonObject.getDescendantPath()</code> will return EMPTY if the value is NULL, and then we can use <code>isEmpty()</code> to check for and EMPTY value.</p> <p>Just to make sure some values are being returned for <code>company</code>, let's reverse the sort order of <code>company</code>. Do this by changing the isDescending flag for label1 in <code>jsonSort()</code> to <code>True</code>:</p> <pre><code>    Set sortobj = jsonSort(dataobj, labels(0), True, labels(1), False, labels(2), False, delim)\n</code></pre> <p>Now when we run our code, we get this:</p> <pre><code>count: 100\ncompany: Zooxo, state: California, city: San Francisco\ncompany: Zoonder, state: New York, city: Flushing     \ncompany: Zoomzone, state: Georgia, city: Cumming      \ncompany: Zoombox, state: New York, city: New York City\ncompany: Zoombeat, state: Michigan, city: Flint\ncompany: Youspan, state: Arizona, city: Scottsdale\ncompany: Yotz, state: New York, city: New York City\ncompany: Yombu, state: Nevada, city: Henderson\ncompany: Yodel, state: New York, city: New York City\ncompany: Yakidoo, state: Georgia, city: Atlanta\n</code></pre>"},{"location":"tutorials/sortpaths.html#conclusion","title":"Conclusion","text":"<p>Now you have a basic understanding of how <code>jsonSort()</code> can be used to easily and quickly sort your array of JSON objects, up to three levels deep, and even with nested JSON objects using label paths.</p> <p>For reference, here is the completed code for this Tutorial:</p> Completed JSON Sort - The Label Paths Example <pre><code>    Option Public\n    Option Declare\n\n    Use \"VoltScriptJsonSort\"\n\n    Sub Initialize()\n        Dim parser as New JsonParser()\n        Dim dataobj as New JsonObject(true)\n        Dim fpath as String\n        Dim labels(2) as String\n        Dim sortobj as JsonObject\n        Dim results(2) as String\n        Dim tmpobj as JsonObject\n        Dim rvar as Variant, i as Integer, z as Integer\n        Dim delim as string\n\n        Try\n            fpath = CurDir() &amp; \"/src/TEST_DATA2.json\"\n            Call parser.loadFromFile(fpath)\n            Set dataObj = parser.getRootObject()\n            Print \"count: \" &amp; dataObj.childCount()\n\n            labels(0) = \"company\"\n            labels(1) = \"address/state\"\n            labels(2) = \"address/city\"\n            delim = \"/\"\n\n            z = 10  ' how many example entries to print\n\n            Set sortobj = jsonSort(dataobj, labels(0), True, labels(1), False, labels(2), False, delim)\n\n            Forall obj in sortobj.GetChildren()   \n                Set tmpobj = obj ' obj is a variant - setting it to tmpobj to give us access to JsonObject methods\n\n                ' Check to make sure there's a label available\n                ' At any point if something isn't available set the results to `*EMPTY*`\n                If labels(0) = \"\" Then  \n                    results(0) = \"*empty*\"\n                Else\n                    ' Check to make sure the label is a child of the current JSON object\n                    If tmpobj.isDescendantPath(labels(0)) Then\n                        'If it's available, get the Scalar Value of that label\n                        rvar = tmpobj.getDescendantPath(labels(0)).ScalarValue\n                        ' Check to make sure the returned Scalar Value is not EMPTY\n                        If isEmpty(rvar) Then \n                            results(0) = \"*empty*\"\n                        Else\n                            results(0) = Cstr(rvar)\n                        End If\n                    End IF\n                End If\n\n                If labels(1) = \"\" Then\n                    results(1) = \"*empty*\"\n                Else\n                    If tmpobj.isDescendantPath(labels(1)) Then\n                        rvar = tmpobj.getDescendantPath(labels(1)).ScalarValue\n                        If isEmpty(rvar) Then \n                            results(1) = \"*empty*\"\n                        Else\n                            results(1) = Cstr(rvar)\n                        End If\n                    End IF\n                End If\n\n                If labels(2) = \"\" Then\n                    results(2) = \"*empty*\"\n                Else\n                    If tmpobj.isDescendantPath(labels(2)) Then\n                        rvar = tmpobj.getDescendantPath(labels(2)).ScalarValue\n                        If isEmpty(rvar) Then \n                            results(2) = \"*empty*\"\n                        Else\n                            results(2) = Cstr(rvar)\n                        End If\n                    End IF\n                End If  \n\n                ' Once we have all of the values for each label, print it out\n                Print \"company: \" &amp; results(0) &amp; \", state: \" &amp; results(1) &amp; \", city: \" &amp; results(2)\n\n                ' Add a check at the end to exit the loop once we've reached the desired number of sample values\n                i++\n                If i = z Then Exit ForAll\n            End Forall\n\n        Catch\n            Print \"Error \" &amp; Error() &amp; \" on line \" &amp; Erl()\n        End Try\n    End Sub\n</code></pre>"}]}